Day 1, Nov 08 2019
#Chap02
#Init project
Install NodeJS 12 LTS
Create folder, mern-stack
Go to, mern-stack
$ npm init
=>create a package.json, to file will ensure that all changes and installatios are localize to this project
$ npm install express

Day 2, Nov 09 2019
#continue Chap 02
#learn the way to new an express app
const express = require('express'); //import express module
const app = express(); //new exxpress app web server

#declare a middleware, to return static file like html, js, css. And equip it to application
const fileServerMiddleware = express.static('public');//A middleware, to return a looking static file base on reqs
app.use('/',fileServerMiddleware);//Mount the middleware for this app.

#Declare a port for this app listen to
app.listen(port,function(){
    console.log('App started on port 3000');
});

#To run this app
$ node server.js
or
$ npm start

#If we move server.js to a subfolder called 'server', then invoke '$npm start', we will got an error
#So we can tell npm know that the entry point is 'server/server.js' by adding to script section of package.json
scripts:start="node server/server.js"

#In package.json, we have a property called, "main": "index.js". This is not entry point.
#Index.js is would have been load when the project is imported as a module, using 'require'

#Separate Script File
#Separate out the JSX and Javascript from index.html
#JSX Transform, we'll move the transform to build time
#New a folder to holde jsx file, ex: App.jsx
#Install, Babel's tool, for transformation
$ npm install --save-dev @babel/core@7 @babel/cli@7
$ node_modules/.bin/babel --version or $ npx babel --verion
$ npm install -save-dev @babel/preset-react@7
#Now, to transform App.jsx to pure javascript, and put the output int the public directory
$ npx babel src --presets @babel/react --out-dir public

#Support older browser
#Example, Array.from, can not be understood on older browsers.
#So, we'll use babel plugin, plugin-transform-arrow-functions, to transformed
#First, install plugin, plugin-transform-arrow-functions
$ npm install --no-save @babel/plugin-transform-arrow-functions@7

#Then, using this plugin and tranform source
$ npx babel src --presets @babel/react --plugin=@babel/plugin-transform-arrow-functions --out-dir public
=> nothing changed

#Install preset-env
$ npm install --save-dev @babel/preset-env@7

#New file src/.babelrc, for babel config
#Execute transform
$ npx babel src --out-dir public

#Automate
#Install nodemon, for watching changes on files
$ npm install nodemon@1

#Add to package.json, some script
scripts:start = "nodemon -w server server/server.js"
scripts:compile = "babel src --out-dir public"
scripts:watch = "babel src --out-dir public --watch --verbose"

#Run to terminal, one for watching jsx changed, an another for watching on js,html, css
$ npm run watch
$ npm start

#Chapter 03
#React classes are created by extending React.Component

#Pass data to child components
#First way, using properties
<IssueRow issue_title="Title of the first issue" /> //pass value
<td>{this.props.issue_title}</td> //retrieve
#Second way, using child properties

#List of DOM element, and how attribute for these
https://reactjs.org/docs/dom-elements.html

#Dynamic compsition

Day 3, Nov 10 2019
#Chap 4
#React State
The target is, add a button, on event click of that button, append a row to list
In addition to learn about #eventhandler #component's state #interactionofcompements

#this.state
Holder everything that can affect the render view

#Async State Initialization
#this.setState(), for modifying a state
#lifecycle methods
componentDidMount(), the dom tree ready, put loading method here
componentDidUpdate(), this.setState can invoke here
componentWillUnmount(), for cleanup 
shouldComponentUpdate(), for prevent rerender view

#Update State
#The state variable cannot be set directly
this.state.issues.push(newissue); //React cannot identify such changes
this.setState({issues: newIssues}); //React can dectect such changes

#Using immutable.js for creating a copy optimally

#Lifting State Up
#Binding scope of method
this.props.createIssue(sampleIssue);
<IssueAdd createIssue={this.createIssue.bind(this)} />
#Question, defferent if not using bind
ƒ createIssue(issue) -> not bind , this is not IssueAdd or IssueList, typically the window object
ƒ bound createIssue() -> bound, this is IssueList


#Event Handling
Create a #form with 2 input #textbox
and a #button to trigger action
override #onSubmit of #form
<form name="issueAdd" onSubmit={this.handleSubmit}>

#Stateless Components
For performence issue,
Convert IssueRow to Stateless component (not using class)

Day 4, Nov 11 2019
#Chap 5, Express & GraphQL
#GraphQL characteristic
Field specification
Graph base
Single endpoint
Strongly typed

#Build api, called About api
#Install graphql-tools, apollo-server,appollo-server-express
$ npm install graphql@0 apollo-server-express@2

#GraphQL Resolver
Resolver func are supplied 4 args
fieldName(obj, args, context, info)
obj: contains the result returned from the resolver. Enable the nested nature of GraphQL query
args: object that passed into the field in the query
EX: setAboutMessage(message: "New Message") -> args is {"message": "New Message"}

#Apollo Playground

#GraphQL Schema File
#Move defined schema to new file
#Specify extention to be watch
"nodemon -w server -e js,graphql server/server.js"

Day 5, Nov 13 2019
Continue chap 5
#List API
Define type Issue, property is datetime, using string to denote

issue:[Issue!]! => a list of Issue, return value is optional, each element in array can not null

#Custom Scalar Types
Define a custom scalar type date
date format #ISO 8601

using #reviver func, to override JSON.parse(), convert datestring to DateObject

Day 6, Nov 15 2019
Continue chap 5
#The Create Api

Day 7, Nov 16 2019
Continue chap 5
#Create API integration

Day 8, Nov 30 2019
#Query variables

#Input Validation
#Declare Enum
#Declare default value

Day 9, Dec 1 2019
#Display error
Transport errors, such as:
- Network connection problem
- Invalid user input

Create utility func that handles:
- All API calls
- Report errors

#Mongo
Install mongo
Start using MongoDb Atlas: https://cloud.mongodb.com/
Create new user admin, call "hugo/123QWE"
Connect to mongo by "Compass" or "Shell"
Conect by Shell:
$mongo "mongodb+srv://cluster0-brgc0.azure.mongodb.net/test"  --username hugo
-->input password
Create db "issuetracker"
$use issuetracker

#MongoDB Node.js Driver
- Mongoose, high level Object Document Mapping for mongo
- MongoDb, low level , using for this project 'IssueTracking'
$npm install mongodb@3
